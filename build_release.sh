#!/bin/bash

# HayatKurtar Release Build Script
# This script builds the app for Play Store release

set -e  # Exit on any error

echo "üöÄ Starting HayatKurtar Release Build Process..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output\nprint_status() {\n    echo -e "${BLUE}[INFO]${NC} $1"\n}\n\nprint_success() {\n    echo -e "${GREEN}[SUCCESS]${NC} $1"\n}\n\nprint_warning() {\n    echo -e "${YELLOW}[WARNING]${NC} $1"\n}\n\nprint_error() {\n    echo -e "${RED}[ERROR]${NC} $1"\n}\n\n# Check if we're in the right directory\nif [ ! -f "settings.gradle.kts" ]; then\n    print_error "Please run this script from the project root directory"\n    exit 1\nfi\n\nprint_status "Checking environment..."\n\n# Check Java version\nif ! command -v java &> /dev/null; then\n    print_error "Java is not installed or not in PATH"\n    exit 1\nfi\n\nJAVA_VERSION=$(java -version 2>&1 | head -n1 | cut -d'\"' -f2 | cut -d'.' -f1)\nif [ "$JAVA_VERSION" -lt "17" ]; then\n    print_error "Java 17 or higher is required (found: $JAVA_VERSION)"\n    exit 1\nfi\nprint_success "Java version check passed"\n\n# Check Android SDK\nif [ -z "$ANDROID_HOME" ]; then\n    print_error "ANDROID_HOME environment variable is not set"\n    exit 1\nfi\nprint_success "Android SDK found at $ANDROID_HOME"\n\n# Clean previous builds\nprint_status "Cleaning previous builds..."\n./gradlew clean\nprint_success "Clean completed"\n\n# Run tests\nprint_status "Running unit tests..."\nif ./gradlew test; then\n    print_success "All tests passed"\nelse\n    print_warning "Some tests failed, but continuing with build"\nfi\n\n# Run lint checks\nprint_status "Running lint checks..."\nif ./gradlew lintRelease; then\n    print_success "Lint checks passed"\nelse\n    print_warning "Lint warnings found, check reports/lint-results-release.html"\nfi\n\n# Build release APK\nprint_status "Building release APK..."\n./gradlew assembleRelease\n\n# Check if APK was built successfully\nRELEASE_APK="app/build/outputs/apk/release/app-release.apk"\nif [ -f "$RELEASE_APK" ]; then\n    print_success "Release APK built successfully!"\n    \n    # Get APK info\n    APK_SIZE=$(du -h "$RELEASE_APK" | cut -f1)\n    print_status "APK size: $APK_SIZE"\n    \n    # Get version info from build.gradle.kts\n    VERSION_NAME=$(grep -o 'versionName = \"[^\"]*\"' app/build.gradle.kts | cut -d'\"' -f2)\n    VERSION_CODE=$(grep -o 'versionCode = [0-9]*' app/build.gradle.kts | cut -d'=' -f2 | tr -d ' ')\n    \n    print_status "Version: $VERSION_NAME ($VERSION_CODE)"\n    \n    # Create release directory\n    RELEASE_DIR="release/v$VERSION_NAME"\n    mkdir -p "$RELEASE_DIR"\n    \n    # Copy APK to release directory\n    cp "$RELEASE_APK" "$RELEASE_DIR/hayatkurtar-v$VERSION_NAME.apk"\n    print_success "APK copied to $RELEASE_DIR/hayatkurtar-v$VERSION_NAME.apk"\n    \n    # Generate checksums\n    cd "$RELEASE_DIR"\n    sha256sum "hayatkurtar-v$VERSION_NAME.apk" > "hayatkurtar-v$VERSION_NAME.apk.sha256"\n    md5sum "hayatkurtar-v$VERSION_NAME.apk" > "hayatkurtar-v$VERSION_NAME.apk.md5"\n    cd - > /dev/null\n    \n    print_success "Checksums generated"\n    \nelse\n    print_error "Failed to build release APK"\n    exit 1\nfi\n\n# Build AAB for Play Store\nprint_status "Building App Bundle (AAB) for Play Store..."\nif ./gradlew bundleRelease; then\n    RELEASE_AAB="app/build/outputs/bundle/release/app-release.aab"\n    if [ -f "$RELEASE_AAB" ]; then\n        # Copy AAB to release directory\n        cp "$RELEASE_AAB" "$RELEASE_DIR/hayatkurtar-v$VERSION_NAME.aab"\n        print_success "App Bundle built and copied to $RELEASE_DIR/hayatkurtar-v$VERSION_NAME.aab"\n        \n        # Generate AAB checksums\n        cd "$RELEASE_DIR"\n        sha256sum "hayatkurtar-v$VERSION_NAME.aab" > "hayatkurtar-v$VERSION_NAME.aab.sha256"\n        md5sum "hayatkurtar-v$VERSION_NAME.aab" > "hayatkurtar-v$VERSION_NAME.aab.md5"\n        cd - > /dev/null\n    fi\nelse\n    print_warning "Failed to build App Bundle (AAB)"\nfi\n\n# Create release notes\nprint_status "Generating release notes..."\ncat > "$RELEASE_DIR/RELEASE_NOTES.md" << EOF\n# HayatKurtar v$VERSION_NAME Release Notes\n\n**Build Information:**\n- Version: $VERSION_NAME\n- Build Code: $VERSION_CODE\n- Build Date: $(date -u '+%Y-%m-%d %H:%M:%S UTC')\n- APK Size: $APK_SIZE\n\n**Files:**\n- \`hayatkurtar-v$VERSION_NAME.apk\` - Release APK for sideloading\n- \`hayatkurtar-v$VERSION_NAME.aab\` - App Bundle for Play Store\n- \`*.sha256\` / \`*.md5\` - Integrity checksums\n\n**Installation:**\n1. Download the APK file\n2. Enable \"Unknown sources\" in Android settings\n3. Install the APK\n4. Grant required Bluetooth and Wi-Fi permissions\n\n**Features:**\n- Offline mesh networking with Bluetooth and Wi-Fi Direct\n- End-to-end encryption with Ed25519/X25519\n- SOS emergency broadcasting\n- Multi-hop message routing\n- Battery optimization\n- Turkish and English localization\n\n**Security:**\n- All communications are encrypted locally\n- No data is transmitted to external servers\n- Open source code available for audit\n\n**System Requirements:**\n- Android 7.0+ (API 24+)\n- Bluetooth 4.0+ capability\n- Wi-Fi Direct support (optional)\n\nEOF\n\nprint_success "Release notes created"\n\n# Generate build report\nprint_status "Generating build report..."\ncat > "$RELEASE_DIR/BUILD_REPORT.txt" << EOF\nHayatKurtar Build Report\n========================\n\nBuild Information:\n- Timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')\n- Version: $VERSION_NAME ($VERSION_CODE)\n- Gradle Version: $(./gradlew --version | grep Gradle | cut -d' ' -f2)\n- Java Version: $(java -version 2>&1 | head -n1)\n- Build Host: $(hostname)\n- Build User: $(whoami)\n\nOutput Files:\nEOF\n\n# List all files in release directory with sizes\nls -la "$RELEASE_DIR" >> "$RELEASE_DIR/BUILD_REPORT.txt"\n\nprint_success "Build report generated"\n\n# Final summary\necho\nprint_success "üéâ Release build completed successfully!"\necho\nprint_status "Release artifacts available in: $RELEASE_DIR"\nprint_status "Next steps:"\necho "  1. Test the APK on physical devices"\necho "  2. Upload AAB to Play Console"\necho "  3. Update store listing with release notes"\necho "  4. Submit for review"\necho\nprint_warning "‚ö†Ô∏è  Remember to:"\necho "  - Test on multiple Android versions"\necho "  - Verify mesh networking functionality"\necho "  - Check all permissions work correctly"\necho "  - Test SOS emergency features"\necho\nprint_status "Happy releasing! üöÄ"